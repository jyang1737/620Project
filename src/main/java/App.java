import java.sql.*;
import java.io.*;
import java.util.*;
import java.text.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {

        String jdbcUrl = "jdbc:mysql://localhost/?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
        String username = "root";
        String password = "admin";

        Connection con = null;
        Statement s = null;
        
        try { 
            Class.forName("com.mysql.cj.jdbc.Driver")  ;

            con = DriverManager.getConnection(jdbcUrl, username, password);
            con.setAutoCommit(false);

            PreparedStatement statement = null;
            statement = con.prepareStatement("DROP DATABASE IF EXISTS bikesharing");
            statement.execute();
            
            statement = con.prepareStatement("CREATE DATABASE bikesharing");

            statement.execute();
            System.out.println("Database created successfully");

            statement = con.prepareStatement("USE bikesharing");
            statement.execute();
            System.out.println("Using bikesharing db");

            statement = con.prepareStatement(
                        "CREATE TABLE IF NOT EXISTS nyc( " +
                        "rideId INTEGER not NULL, " +
                        "bikeId INTEGER not NULL, " +
                        "startTime DATETIME, " +
                        "endTime DATETIME, " +
                        "startStation INTEGER, " +
                        "endStation INTEGER, " +
                        "subscriber BOOLEAN, " +
                        "PRIMARY KEY (rideId))");
            statement.execute();
            System.out.println("nyc table created");
            
            statement = con.prepareStatement(
                        "CREATE TABLE IF NOT EXISTS dc( " +
                        "rideId INTEGER not NULL, " + 
                        "bikeId INTEGER not NULL, " + 
                        "startTime DATETIME, " + 
                        "endTime DATETIME, " + 
                        "startStation INTEGER, " + 
                        "endStation INTEGER, " + 
                        "subscriber BOOLEAN, " +
                        "PRIMARY KEY (rideId))");
            statement.execute();
            System.out.println("dc table created");

            statement = con.prepareStatement(
                        "CREATE TABLE IF NOT EXISTS chicago( " +
                        "rideId INTEGER not NULL, " + 
                        "bikeId INTEGER not NULL, " + 
                        "startTime DATETIME, " + 
                        "endTime DATETIME, " + 
                        "startStation INTEGER, " + 
                        "endStation INTEGER, " + 
                        "subscriber BOOLEAN, " +
                        "PRIMARY KEY (rideId))");
            statement.execute();
            System.out.println("chicago table created");

            
            String csvFile = "src/main/java/data/nyc1.csv";
            BufferedReader csvReader = new BufferedReader(new FileReader(csvFile));
            csvReader.readLine();
            String row;
            int ctr = 0;
            while ((row = csvReader.readLine()) != null) {
                //row = csvReader.readLine();
                String[] data = row.split(",");
                //SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSSS");
                //java.util.Date parsedDate = format.parse(data[2]);
                Timestamp start = Timestamp.valueOf(data[1].replace("\"",""));
                Timestamp end = Timestamp.valueOf(data[2].replace("\"",""));
                statement = con.prepareStatement(
                            "INSERT INTO nyc (rideId, bikeId, startTime, " +
                            "endTime, startStation, endStation, subscriber)" +
                            " VALUES (?,?,?,?,?,?,?)");
                statement.setInt(1, ctr);
                statement.setInt(2, Integer.parseInt(data[11]));
                statement.setObject(3, start);
                statement.setObject(4, end);
                statement.setInt(5, Integer.parseInt(data[3]));
                statement.setInt(6, Integer.parseInt(data[7]));
                boolean sub = data[12].replace("\"","").equals("Subscriber");
                statement.setBoolean(7, sub);

                statement.executeUpdate();
                //System.out.println("inserted a line");
                ctr++;
            }
            con.commit();
            /*
            csvFile = "src/main/java/data/chicago1.csv";
            BufferedReader csvReader = new BufferedReader(new FileReader(csvFile));
            csvReader.readLine();
            String row;
            int ctr = 0;
            while ((row = csvReader.readLine()) != null) {
                //row = csvReader.readLine();
                String[] data = row.split(",");
                //SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSSS");
                //java.util.Date parsedDate = format.parse(data[2]);
                Timestamp start = Timestamp.valueOf(data[1].replace("\"",""));
                Timestamp end = Timestamp.valueOf(data[2].replace("\"",""));
                statement = con.prepareStatement(
                            "INSERT INTO chicago (rideId, bikeId, startTime, " +
                            "endTime, startStation, endStation, subscriber)" +
                            " VALUES (?,?,?,?,?,?,?)");
                statement.setInt(1, ctr);
                statement.setInt(2, Integer.parseInt(data[11]));
                statement.setObject(3, start);
                statement.setObject(4, end);
                statement.setInt(5, Integer.parseInt(data[3]));
                statement.setInt(6, Integer.parseInt(data[7]));
                boolean sub = data[12].replace("\"","").equals("Subscriber");
                statement.setBoolean(7, sub);

                statement.executeUpdate();
                System.out.println("inserted a line");
                ctr++;
            }
*/

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (s != null) {
                    s.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
